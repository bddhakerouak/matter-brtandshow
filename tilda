<script>
var canvas = document.getElementById('canvas');
    var Engine = Matter.Engine,
    Render = Matter.Render,
    Events = Matter.Events,
    MouseConstraint = Matter.MouseConstraint,
    Mouse = Matter.Mouse,
    World = Matter.World,
    Bodies = Matter.Bodies;

// create an engine
var engine = Engine.create(),
    world = engine.world;

engine.world.gravity.y = 1;
engine.world.gravity.x = 0;

// create a renderer
var render = Render.create({
    element: canvas,
    engine: engine,
    options: {
      width: window.innerWidth,
      height: window.innerHeight,
      pixelRatio: 2,
      background: 'transparent',
      wireframes: false,
    }
});


// create bounds
var ground = Bodies.rectangle(
  (window.innerWidth / 2) + 160, window.innerHeight + 80, window.innerWidth + 320, 160,{render: { fillStyle: '#080808'}, isStatic: true });
var wallLeft = Bodies.rectangle( -80, window.innerHeight / 2, 160,   window.innerHeight, { isStatic: true });
var wallRight = Bodies.rectangle(window.innerWidth + 80, window.innerHeight / 2, 160, 1200, { isStatic: true })
var roof = Bodies.rectangle(
  (window.innerWidth / 2) + 160, -80, window.innerWidth + 320, 160, { isStatic: true })

// object colors & variables
var arts = "#000"
var videos = "#B3E8F3"
var abouts = '#4D4D4D'

var border = 1
var radius = 20

// create objects

// art & design
var eye = Bodies.rectangle(1061, 127, 275, 261, {chamfer: {radius: radius}, render: { sprite: { texture: 'https://static.tildacdn.com/tild3537-3939-4164-b432-386635386632/eye.svg', xScale: 1, yScale: 1 }}})
var alpha = Bodies.rectangle(428, 370, 527, 261, {chamfer: {radius: radius}, render: { sprite: { texture: 'https://static.tildacdn.com/tild3065-6333-4639-b735-633666356466/alpha.svg', xScale: 1, yScale: 1 }}})
var light = Bodies.rectangle(818, 125, 209, 209, {chamfer: {radius: radius}, render: { sprite: { texture: 'https://static.tildacdn.com/tild6233-6661-4335-a664-323638316466/light.svg', xScale: 1, yScale: 1 }}})
var coins = Bodies.rectangle(428, 105, 197, 197, {chamfer: {radius: radius}, render: { sprite: { texture: 'https://static.tildacdn.com/tild3962-3830-4938-a166-343266393963/coins.svg', xScale: 1, yScale: 1 }}})
var balanceDisplay = Bodies.rectangle(678, 11, 218, 94, {chamfer: {radius: radius}, render: { sprite: { texture: 'https://static.tildacdn.com/tild6338-6235-4633-b566-336331346239/balanceDisplay.svg', xScale: 1, yScale: 1 }}})
// video
var CPM = Bodies.rectangle(1061, 305, 411, 306, {chamfer: {radius: radius}, render: { sprite: { texture: 'https://static.tildacdn.com/tild6531-6137-4133-a230-626166383230/CPM.svg', xScale: 1, yScale: 1 }}})


// Original Shape
// var illustration = Bodies.rectangle(70, 500, 133, 40, {render: { fillStyle: arts}, chamfer: {radius: 20}})


// add all of the bodies to the world
World.add(engine.world, [
  ground, wallLeft, wallRight, roof, eye, alpha, light, coins, balanceDisplay, CPM
]);

// add mouse control
var mouse = Mouse.create(render.canvas),
    mouseConstraint = MouseConstraint.create(engine, {
      mouse: mouse,
      constraint: {
        stiffness: 0.2,
        render: {
          visible: false
        }
      }
    });

World.add(world, mouseConstraint);

// keep the mouse in sync with rendering
render.mouse = mouse;

// Allow page scrolling in matter.js window
mouse.element.removeEventListener("mousewheel", mouse.mousewheel);
mouse.element.removeEventListener("DOMMouseScroll", mouse.mousewheel);

// Detect clicks vs. drags
let click = false;

document.addEventListener('mousedown', () => click = true);
document.addEventListener('mousemove', () => click = false);
document.addEventListener('mouseup', () => console.log(click ? 'click' : 'drag'));

// Create a On-Mouseup Event-Handler
Events.on(mouseConstraint, 'mouseup', function(event) {
  var mouseConstraint = event.source;
  var bodies = engine.world.bodies;
  if (!mouseConstraint.bodyB) {
    for (i = 0; i < bodies.length; i++) { 
      var body = bodies[i];
      // Check if clicked or dragged
      if (click === true) {
      if (Matter.Bounds.contains(body.bounds, mouseConstraint.mouse.position)) {
          var bodyUrl = body.url;
          console.log("Body.Url >> " + bodyUrl);
          // Hyperlinking feature
          if (bodyUrl != undefined) {
            //window.location.href = bodyUrl;
            window.open(bodyUrl, '_blank');
            console.log("Hyperlink was opened");
          }
          break;
        }
      }
    }
  }
});

// run the engine
Engine.run(engine);

// run the renderer
Render.run(render);
</script>
